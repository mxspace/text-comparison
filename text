可靠的解决方案包含的能力，但是其实作为我，我是人生公司研发中心总经理来看，这些给我的东西我怎么用好？其实是我现在最大的一个问题。所以其实在2017年我们就开始在探索，把恒生核心的业务系统，我们往云原生上面搬。所以在2017年的时候，我们当时开始做恒生的技术平台，叫JRES3，我们今年也发布过。在2018年，我个人认为就JRES3其实是我在恒生建了一个比较，怎么说呢？比较精致的或者比较好用的一个厨房而已。我们在2019年才是把我们所谓的O4、UF3.0，我们在这个厨房里面重新加工，我们变成了云原生的改造。因为原来的这些业务系统其实不是基于云原生思考的，所以其实这里我们做了很多的改造工作。这一年其实是我在恒生我觉得提升最快，经验收获最多。简单来说，其实就是掉坑里掉的最多的一年。我从这里爬了无数次出来，所以我今天其实想在现场跟大家分享一下，说金融行业的核心业务系统怎么做到云原生？，它不是一个互联网系统，比如说像余额宝或者像其他的系统，它天生就是基于云原生来思考的。当恒生业务系统不是这样的时候，我怎么做？其实这个是我这些年一直很痛苦的。我相信所有的金融机构，它有很多系统都要做改造和升级，因为云原生是趋势，我们上半场已经解释过。所以我今天的主题就是这个，说金融的核心业务系统怎么做云原生改造？我还用了刘总的一个logo和(外文00:01:54)，我把它改成(外文00:01:55)。看起来很简单，属于线上。现在一般我们大部分的系统都是这么干的。
其实恒生有很多原来做1.0的时候，我们说搬上云，那就算云原生了吗？是不是就这么简单？所以其实我们后来一直在思考，云原生到底要做什么？我今天的内容会分这几块来讲，因为云原生的核心是三大块内容。微服务怎么改，容器怎么改，第一个模式流程怎么建？核心就在这三块。那么恒生是怎么做的？我会给大家一一讲。我们首先来看云原生，云原生跟传统的变化，我用了三幅图，我特意用了三个比较大家容易理解的例子。这个是最简单的，大家都能想到的。
原来在机场里面我要上一台机器，我就去买，搬进来放机柜，这是最传统的做法。现在肯定是在云上想要多少就拿多少，只要按需付费就好。所以“双十一”那么大的量，其实也无所谓，云是无限的。第二，我觉得比较有意思的是，传统的恒生其实是拿着零部件去客户现场，我给你装一台你想要的机器，我给你装个O32，我给你装一个UF2.0，然后你说要做这些业务，但其实这个业务能不能在云上一键获取呢？你想要一个mini的smart，你想要一个高大上的奔驰，你自己去选。为什么非要我去你机房里装？所以这种交互方式能不能变？第三个，我们传统酿酒的工艺都是手工一步步造，人工在那里造，这就相当于我们原来的开发。说真的，原来的开发就是这样的，开发人员做完，测试人员做测试，测试人员测完，同时交付人员集成，集成公司集成完交客户，就是这么一套逻辑，恒生其实就这么干的。但是我们能不能稍微自动化一点？我们能不能像现在的青岛啤酒那种加工模式？全自动化。这其实是我面临的去改造恒生核心业务系统最痛苦的三件事。其实说痛苦，回过来就是这三件事儿，我们一直在做云原生的核心，我们一直在定义云原生，其实这个业界有标准，架构的标准是微服务，交付的标准或者是技术的标准是容器化，开发的这个标准是(外文00:04:15)。他从1.0的开发模式(听不清00:04:19)到2.0的敏捷，到最后的(外文00:04:21)，从单机到垂直到微服务，从物理接到迅即，到云，到容器，所有的变化的根本是什么？我们一直在探讨我们为什么要折腾自己？我作为一个开发人员，我为什么要折腾自己？其实根本的变化在于客户需求的变化太快了。有一句话不是说人的欲望和人的懒惰才是导致技术进步的根本，所以在金融行业也一样，我们希望我的需求明天就能被满足。
传统的2.0或(听不清00:04:51)我们上一个需求，大家都知道时间，我们要按月计，但是我们能不能按天记，或者按小时记。比如说像蚂蚁，阿里，他们的公司是按分钟计，这就是他们做到的，所以这些技术对于粉丝而言，我们怎么来改造？所以我面临的就是三大挑战，微服务容器，第一个(外文00:05:11)。接下来我的选择类的分享，我怎么做的，看看微服务我们怎么做？非常痛苦。微服务三个字，我相信大家怎么理解，我经常说把一个单体应用给我拆成微服务，好牛逼的一句话，大家去拆的。当时很多人在问我就业务部门很好，因为微服务是我主导的吗？我们所有业务问我一句话说，多规上规，一个表的增删改查是一个接口算规吗？要到这么细吗？他问我这句话？我当时也不知道怎么解答，我也不知道，到今天为止我还没标准答案。
后来我去找了一个挺有意思的游戏，我不知道大家看过没有，(听不清00:05:52)的游戏，数学加(听不清00:05:53)，大家看中心这个细胞，它九宫格中心那个是一个细胞游戏，当你的中心身边没有任何一个细胞存活的时候，你一定会死掉。这是它游戏规则，他说在你的身边超过四个细胞存活的时候，你也会被干掉。只有下面两种，说三个或者是两个，尤其是三个是最好的状态，我还可以存活。这是它这个游戏定的规则，其实非常像我们社会的一个群体，形成微服务是不是应该也是类似的？如果你是个孤立的微服务，我不相信你有存活的空间，又变成巨石了，因为跟别人都不打交道。所以简单来说，我们现在拆微服务的时候，基本上我们会说微服务，你首先要业务独立，怎么慢慢独立？我们当时说了三个独立、独立部署、独立升级，独立运行(听不清00:06:48)，这是我单独的标准。但是你跟其他微服务之间不是有交互，怎么做？通过一部、通过队列、通过所有的技术手段打破这种全依赖，变成义务化。但是你说我有需要必须强一致的数据备份，就是数据多份，我们一个微服务里面多份数据，我为了互相影响，其实这些事情在我们的所有迁移过程中都在做。
举个例子，恒生在做理财，我的微服务拆分的时候，一开始我们拆了5个微服务，发现升级的时候一塌糊涂，后来我们拆成15个，升级的时候也是一塌糊涂，到目前为止我们拆成了7~9个，慢慢发现好用了，所以你会发现微服务拆分它是一个过程，大家不要就纠结说我微服务一开始就拆的非常细，没必要，我相信大家所有人可以慢慢的去体会这个过程，你只有上线了去升级了，去玩了，你才知道这个标准在哪，所以我们在内部一直是这样做的。首先是业务要独立，然后就是团队。我们还有一个标准很简单，如果这个微服务能够10个人搞定，你基本上才到位了，如果要20个人搞定，我觉得还太烦了，你给我再拆。如果5个人才搞定，也太小了，就类似于这样的，其实都是一些标准可以借鉴。所以首先要做的就是微服务采购，我先不说技术，这些都没有意义，因为业务的基础就是微服务。第二件事情才是所谓的技术，所以我研发中心做的事情就是解决技术问题，所以当我看到微服务架构的时候，我在2017年的时候，我们开始去选，其实就非常痛苦。微服务的周边的架构非常多，最流行的double、(外文00:08:31)，都是开源的迷主了。然后边上的一堆的什么阿波罗、芒果太多了，根本无法选择。所以我后来就定义研发中心做的技术平台是什么？所以当时有了军事3.0针对微服务开发平台的定义，我要解决三件事，就三件事，我不自己造轮子，在微服务领域下不需要自己造轮子，我要解决的就是开源版本它不兼容，大家应该涉及过(外文00:09)的1.0到2.0，2.0到3.0，大家都非常痛苦，那就是不兼容的，你要用就用不用就滚蛋，它非常简单。所以在恒生内部，我们的业务系统全部是我们的规范和标准，所以开源的不兼容是我解决的。他们的标准开发对象不需要去考虑开源的问题，像(听不清00:09:20)也不兼容，它都可以不兼容，但是在我这都要兼容。
第二件事情是开源的bug，我相信所有人都知道开源的bug，因为没人给它买单，所以在恒生内部所有开源的bug，我们的做法有两个。一，我能看得懂源码，我就改它，然后贡献给社区。第二，如果这个编码我真改不动，我就绕过它，用其它方式来在上层是无感知的，两种解决办法来解决整个技术平台的稳定性问题。第三件事就是运维的问题，这一堆的周边的开源框架都有自己的运营界面，所以我经常去一家券商，他自己在做开源的学习，然后我问他运维用什么，他打开10个界面给我看，说这个是看(听不清00:10:03)，这个看DK的，基本上都是这样的。所以我们在这里我们就要把它统一在一起说，要建统一的运维规范，这个是我们业务系统目前为止我们核心在做的几件事情。所以才有了我们之前发布的军事三，我们是希望把这个平台带到业界去，让大家把这些技术的问题都交给恒生来解决，大家更关注上面的业务开发，这是我们当时做技术平台的选择和解决。最后一帕是微服务最难搞的一个东西就是服务治理。我们当初其实像1242.0还是简单的，像我们现在的架构网关到微服务已经没有那么复杂的逻辑架构了，就是简平化了。但是我的微服务一旦超过30个、50个、100个的时候，你怎么治理？从来我们就没想过这些问题。
所以我们后来就开始去梳理，我们微服务你到底要自己哪些指标？就是在金融行业我们不说互联网，互联网它有自己N多指标，金融行业的指标有哪些？我们说我们要不要做服务发现、伸缩、灰度，你需要一个什么样的界面，你要不要全链路，你要不要做分析，其实这许多的治理下不是恒生自己在家里我自己想的，是因为我们拿了这套系统去宣传那上线了，运营人员会跟我提，他说我能不能垄断降级，我能不能服务限流，我要不要监控，他提给我之后，我会在我的平台上统一做成完整的一个展示一些效果给他。其实这是配合金融行业特有的一些监控指标。如果你其实直接拿比如说互联网的指标来对不一定对的上。这个其实我们之前对过，我们会去参考，因为我们跟阿里的合作，跟蚂蚁的合作，我会看他们监控哪些，其实他们比我们多很多，也比我们系统多，但是我们有的他们有时候也考虑，所以这是不同的行业导致的，所以在这一点上我们一直在做这件事儿。所以服务治理是我们现在微服务平台核心的关键的开发任务，因为框架我就给它定好了，我现在的重点就是把它自己到位。我们的目标也很简单，我们是希望现在所有券商的运营人员，不需要学习微服务升级这套的理念，能够运维我们整套核心的业务系统，这才是本质，因为我不可能为了升级一个服务，把所有人全换一遍，这不现实。所以这才是我们要去解放运维人员的一个地方。大家说微服务，还有一块是大家最关注的，但是这一块是公有云做的最好的，就是两地三中心。但是我为什么还要说呢？再公有云做到位了，我们自己要不要做好？券商，其实挺有意思的，不管是券商还是金融机构，它一般都有自己的机房，你不可能到目前为止，还没有人可以把自己的核心业务、核心数据上到蔚为(音译00:12:58)。你上公务员，我相信你不用考虑两地三中心，云已经把你搞定。但是如果自己玩是怎么玩？目前今年我们在招商证券，我们跟他做153的时候，我们两地三中心方案在他们现场整整测了两个月，一个个组建测过去，从ZK、(外文00:13:16)ES，就是说所有的全省，这是当时我们给它做的比较简化，这是已经是简化过的方案，同城双活、异地灾备，目前为止除了数据库，没有上分布式数据库之外，它其他的所有组件全部是投资人合伙，全部的运费操作界面就在我的(外文00:13:36)上一键一点，它就可以做灾备切换，其实这是跟云平台效果是一样的。
其实这些东西也是从阿里云学来的，因为阿里云上天生就是这样的，所以我们既然上不了了，核心业务上不去的情况下，我们自己的机房也要具备这样的能力，所以我们就提供了一套完整的运维监控平台，能够让你的应用快速的做到同城双活、两地三中心，这是我们一直在做的努力的一个方向。所以我们跟阿里云一结合，底下20层他们搞定，上层的应用层我们搞定，这样整体的金融行业，所有的业务系统，我们基本上就具备了云原生的价值，所以后面我举的例子也是这样，1、2、3，我们可以看一下，我们把1F2.0点到163，我们到底做了什么？,我捡最核心的，因为通用的微服改造都一样。第一件事情就是为服务拆分，这是一幅我们在招商拆完微服之后的一个监控视图。就是原来我们是看应用的，我们是看比如说AR，AR的拓扑结构的，现在不是了，我们现在看的是服务的状态，从业务的角度来看服务的好与坏，所以这幅图是全景图。接下来金融行业跟互联网最不同的点都出现，我们在互联网里面可以说，一个服务你做个10毫秒、100毫秒已经很不错了，可以单笔延迟，我觉得已经很不错，但是招商给我提的是希望在5毫秒之内，并发量还要在2万米每秒的情况下，单笔延迟平均做到5~7毫秒，突然我就发现，我用互联网的架构可能搞不定，所以因为它用户要大，你要收购分表，传统的互联网分布分表怎么做？
加一层来看看，加个DB访问层，内层一加，5毫秒(听不清00:15:30)，我业务都不用写。所以后来我们又做了一个事情，我们在我们自己的架构上做了很多改进，我在请求一进来的时候就直接去分辨定位，我直接跟数据库打交道，我们把网络交互的时间降到最低，我们直接在业务层来做这件事，我就没法使用中间件组件带来的便利，这就是金融行业不同的点。金融行业还有一种产品，它要在1毫秒以内对不对？急速交易，我们现在在追求4微秒，跟云原生怎么搭？大家肯定在问这个问题，我要做到四微秒，我跟原生是怎么搭？我能放在原生的机器上跑吗？四微秒。跑不了，你一定是要定制的机器、定制的硬件。所以在这个时候你没孵化之后，在恒生内部的做法，我们是把集中交易模块的微服务，用我们最快的组件去做，用最牛逼的机器去搭载，但是它整体的服务、治理、监控全部在一起。所以想做提速很简单，但是你提速了之后，你跟你周边的所有系统融为一体，而且可以做混合云管理、做混合云监控，一体化的思考比较难。所以在这里，我们就基于整套微服的拆解，包括提速的产品，我们都做了自己的解决方案，而且是在一个微服务体系下统一去看。这样的好处就在于说，你看到的还是一个整体的应用，只是说那边需要提速交易而已。不是说为了提速交易，我拿一套完整的平台，又是孤立的统一的结构、独立的部署。所以这是两种不同的实现方式。这是整个微服务改造，其实在我遇到的比较高的坑。一个坑就是我刚才说的怎么拆？第二个坑开源我怎么避免？第三个坑，金融行业的特殊性。两地三中心高性能提速你怎么避免、怎么做？这个其实很多时候是互联网公司它不需要考虑，所以这才是我和阿里云合作的最大的地方，双方克服才有意思，这么玩才有意思。
微服务说完了，下一个当然就容器了。容器在内部我怎么思考容器？一样的，我其实是想通过T8S容器来屏蔽我底下，不管是什么物理机、各种云，上面其实是统一的容器管理平台。但是容器又有一点不一样，我们最近在跟每家券商交流，他给我容器提的需求，很多人都做不到。他说容器的网络要支持多张网卡。这个是没有的东西，容器的网络要支持不同交换机，他提了N多要求，其实都是开源的PS没有。我们去线上看各种开发商的容器云，许多人都是不具备。所以这个时候就会很麻烦，这是因为在金融行业的领域里面，我们许多时候就是为了考虑提速和性能的时候，我们是要分开部署网络，隔离各种安全的措施，让我们需要做这件事，这是因为在我们自己的机房，如果你在公有云上也没这个事儿。我们容器解决不了windows的问题，但是在金融机构里面还有windows的程序。其实这些问题我们就会在恒生的容器云里面，我们自己把这些东西，就是把容器加物理机的管理、加阿里云的接口、加各种云，我们把它变成一个混合云网，在上面才是我们的应用。我们的应用有个部署编排的标准，你只要满足我的标准，就可以在线白皮化部署，就是这些事儿。
所以其实我们的做法也很简单，首先借助于巨人的肩膀T8S，我们跟很多比如说像阿里云的容器，我们也会去合作，我们会把它包在下面这一层。金融行业的特殊属性，我们会基于上面做二次开发。另外，金融领域的最大实践，我们会自己在这里做模板和编辑，这是我一直在做的事。所以F3、O45、理财、TAS，这些产品未来都会上这种容器，从一边排部署出来。我希望将来交付到客户身上的这种，不是现在的立刻包，要去手工抓。那么别人就会问，我怎么抓？抓就很简单，我会在客户端部署一个C的平台，通过这种的IP号的界面，你选一个容器，一键生产你的生产环境，我们现在这个部署平台可以支持容器的部署，也可以支持物理机的部署，两种都做。所以你可以根据你自己的选择，如果你觉得你的人员hold住容器，我愿意上容器，我相信。但是有些人说，我现在还不具备容器的能力，但是我希望未来容器升级的时候，我的运维方式不要变。就是这个界面，都一样，部署升级，升级也是这样，我让你选一个容器或者选个包一键上传，这是我们目前在招商，他们要给我的目标就是这样，我们现在理财也是这样子的吗？就是我们希望通过这种方式，恒生的交付跟金融机构的交付就真的打通了，我把游戏同步给你，你自己去申就好了，不用等着安装人员上线给你装，只要我们不动数据库的场景下，其实这种交付模式是我们一直在探索和探讨的。在恒生内部目前这种交付的界面统一，基本上已经成为标准。第三方容器要做的事情就是监控，一定是监控，因为我去券商聊过，有人跟我提说我用了容器之后，就在物理机上加了一层。其实现在别人用容器怎么用的？物理机再容器或者物理机阿里云再容器，我检查了一台机器变成了三层，太复杂了，然我监控的时候怎么办？我物理机用这个监控平台，(听不清00:21:32)，所以混合云的监控是一定要去做的，比如说物理机的情况，容器的情况，还有所有的(外文00:21:39)的情况，能不能在一个监控平台里面搞定？这就是对监控平台有要求，现在目前市面的厂商，他们可能有些人是做底层的物理机的监控，有些人做(外文00:21:54)的监控，有人做(外文00:21:54)监控，他们各自互相开发还挺麻烦。
所以恒生做了一个叫监控运维的开发平台，就是为了把你的数据全部采过来，我可以统一在这里按照你的需求给你展示。所以我们给运维人员提供了编程的能力，他需要监控什么？可以在上面写拍摄条本，可以写他的页面定制，这是我们希望在我们的运维监控平台上把容器的监控，还有所有的应用的监控，还有所有的公司用到的结构都可以放在上面。这是我们想要达到的一个监控平台，而不是给你一个监控产品，这是我们现在整个技术平台的一个思考。所以在容器化这一块，恒生其实说在1.0做的多不多？很少。主要还是自己的自运营的公司，我们叫金城的，我们把金城的核心产品叫GGN，把进程给上线到容器里面了。他们的上线过程其实挺复杂，我们一开始从应用服务到代码开发，到最后CICD，到最后竟像一般的扫描到安全，其实我们一整套的部署，我们从开发到UAT到生产，我们把整套流程全部打通，我们在基层大概花了半年的时间在梳理这个东西，所以他整个上线之后，你会发现他原来是一台机器一个CPU，那种场景下，其实我们现在到容器化之后，CPU的利用率明显提升，内存的使用率也会提升，这就是融机构带来的好处。
因为当我量不大的时候，其实我是不需要独占机器去跑我的应用的。我的应用其实两个CPU就够了，原来为了做隔离，我非要拿一个虚拟机去跑，其实没必要。所以这是容器在目前我们在金城感觉到它的好处，金城现在如果开发一个需求，从上线到部署，基本上其实可以迭代的，这个没问题，因为他自运营，因为恒生的所有产品是要到客户去运营，所以我们一直没法把这个推行下去，我们子公司我们内部已经开始走这个流程，我们来看整个东西到底能不能在行业往下去，这是我们在落地，所以这是逻辑化的改造。其实前两都偏开发和交付，另外一方第一个模式其实是本身内部的一个提升，所以在恒生内部怎么做？第一步的时候，我也可以给大家分享，因为现在金融机构都开始做自演，都开始有自己的团队，开始去也考虑这个东西怎么开发，在恒生内部我们做第一共识的开发，首先做的第一件事情，我们就是洗脑，我在内部跟所有的手下们先洗脑，我说DOS到底是什么？怎么开发？怎么用？这是一种理念，不是一个手段，大家去宣传。但是其实我后来总结，我说我跟他们主要讲5件事情，怎么自动化、怎么有数据来度量你做的好与坏，我怎么能够把大家的能力共享出来？其实就这几件事情大家心里就明白了，因为大家都是在公司，其实很懂。我就告诉他DOS无外乎就是开发运维一体化，其实也没说，这废话一样，但是我会告诉他怎么干，所以我们实实在在地干。
我们首先第一件事情，做的第一件事情是流程的重塑，我们把恒生公司的开发流程打破重新来，因为原来的做法，我们典型的就是开发完，就需求完、设计完开发，开发、设计完去做测试，测试设计完去做运维，典型的就这样，一个需求不是按需求来的，是按版本来的。我一个版本先聚集30个需求打一个版本，然后一个版本再去开发，再去生产，再去上线。在恒生这套流程走完，基本上180天还没到客户那里去，所以其实效率非常低。怎么办？我们后来就在恒生公司内部打破版本的概念，我能不能按需求？需求开发测试，我能不能全部在线？这是我们一直在努力追求的方向。说实话到现在我也没有全部做到，我只是现在已经把这个流程给它梳理清楚，我们在努力地布置这些工具和所有的理念再次洗脑。
另外更重要的是我要让这些人愿意在这个平台上去做，其实需要给他一个统一的工具的。原来为什么你知道是隔离的吗？是因为他们的工具就是隔离的，他根本就没有把所有数据打通，开发流程的所有数据天生就是隔离的，就跟应用系统是一样的。你让他们说全部打通，那有什么用呢？每个人还在自己的办公平台上干活的。所以我现在在做这一件事，流程梳理完，马上就要做工具，把流程固化下来。我们是希望所有角色，你每天只要登录这个平台，你都有更多的待办事项要去处理，我有事情来了，我会滴滴你，你直接出来，现在有滴滴，你直接去干。每个人是事情驱动的，而不是自己找事情干，原来的做法都是自己找事情干。原来是开发人员找需求干，测试人员找版本测试，交付人员找版本完了去交付，都是这么干的，现在全部颠倒。我做完了我会通知你马上干，你不干我这边流程就走不下去了。而且所有的数据会在数据的统一度量，这是我们整个队DOS的成功。所以整个DOS在恒生内部，你可以看到，我会把所有流程的工具全部打通，所有数据统一分析，但是你会发现这里很多工具是我自研的，为什么要自研？其实恒生很特别的，恒生是一家toB的软件公司。如果是金融机构，我觉得你不需要资源，因为你没有几个版本要管，恒生一个OCR有几百个版本，客户那里不同的我都要管。这种需求根本没法，而且还是质保流程。如果你自研根本没有什么所谓的质保流程，对不对？你需求开发完上线，就这一整套。在恒生里面还有版本、用户，这种没办法找不到，我得自己干。开发工具是跟恒生的开发平台结合的，但是我们也会去用收费的软件。因为在DOS领域里面有很多专业的事情是不需要自己干的，比如说像制品部，这就是一个非常专业的事情，C++、Java、Python、PHP 、JS，所有东西你们说怎么管？怎么交付？怎么去分析它的安全？恒生不是做这个软件公司对不对？我们就直接跟现在排名比较好的开发商合作，我们买它就可以。但是我们需要自己把全流程打通，因为现在没有一家开发商会帮你把所有事情打通，没有人在做这件事。现在卖你上市平台基本上是我给你一个流程，你来适应我，都是这么干的。我先告诉你流程应该是这样的，你改变你的流程来适应我。所以我们现在的想法是，恒生将来我会把这套平台做成一个流水线式的，我们内部叫效能引擎，然后我通过个性化，因为恒生有驻场人员，去适配你的流程，把它串到这个平台上来，这是我整个DNS流程输出的理念。我会重新去把这套平台变成一个完整的平台，你也可以按我的要求去买，你也可以买自己的，我们只需要接口打通，这是整个逻辑。但是首先恒生要玩成功了，我的交付流程真快了，我才会推荐给你们用，所以这其实是一套完整的流程。那么我们恒生的效果是怎样的？可以看一下，我们拿(听不清00:29:21)来做实验，我们从2016年就开始去打造这些东西，其实到2019年到目前为止，我认为远远不够。
其实只是现在做到说我交付周期缩短，我的成功率高，但是我并没有把全流程全部在一个平台上做，目前我们还在做这个努力。我们希望所有操作员能登录到一个平台上去，这个是我们现在在努力的。我只是把这些工具串来算，但是交付并不好，体验并不好，所以整个(外文00:29:49)这是我们想要做的事。综上所述我们三大块内容，微服、容器、(外文00:30)，恒生是怎么做的。其实我用了10个点说微服务改造，先做微服务的拆分，这个点上你得拆得恰当。反正我个人建议大家不要纠结，你可以先拆，先上线去玩，大不了再回头再拆。但是这里对平台的要求就很高，你的代码不能再重写一遍，这是唯一的要求，所以在恒生内部为什么他们开发规范都是我的规范？只要他按我的规范去写微服务，他想合并的时候他代码不用给你，这是我把底下的东西都屏蔽掉了，所以这个就很关键。第二件事情就是整个服务平台你要非常好用、简单，刚才我说了我这个就是3.0的目的。
还有就是整个治理一定要非常深入，其实我理想的治理是什么？我能通过一个业务报错直接到我的代码，我在有一次分享会上，有一个互联网公司他就是这么做的。他说业务报错我可以直接跳到代码，因为他是自营，他直接现场改代码，然后就发布集成了。这整个流程其实当时大家都是在，我觉得我是膜拜，我觉得我还离得很远，所以这个治理就非常关键。另外就是整个服务运行要两地三中心，要高可靠，这就是云最大的特点。当然你的机房要高可靠的时候就只能靠自己，如果你上阿里云就简单了，阿里云会帮你搞定，但是应用的高可靠还是要你自己搞定。这其实是两件事。
第二容器化的改造，容器的底座选择很重要，你是选阿里云的容器呢？还是选开门的容器呢？还是选什么？你可以自己选，当然你也可以不选容器，你直接用物理机，没问题，这个根据你自己的需要。但是我们说云原生容器化的交付还是可以更快一点、快速，部署要简单，监控要全面，这是必然的。第一个我首先是理念，恒生在做的DNS是我花了一年时间跟大家去讲这个东西，在恒生内部其实大家很难接受，尤其是测试人员跟交付和现场实施人员，其实有点颠覆他的意思。其实说白了(外文00:32:14)将来不需要测试和交付，但是我没有这个本事说，因为他要(听不清00:32:20)，这个是大家的理念。第二是流程改进，第三就是数据链。工具是把你的理念和流程固化在那里的地方，所以工具其实并不是最主要的点。其实最主要的点还是刚才说的流程和所有人对这件事的看法。所以整个云原生，我觉得你把这三件事想明白、想透你去做，所以我也用了一句不怎么押韵的诗，我说明天升改造期其实并不难，对不对？至少我们2019年我不停的掉到坑里在爬出来这个过程，会让我对整个云原生有了很深的领悟，所以我也希望说能够把这些经验能够输出给所有的金融机构，这个其实是我们最近技术员也在做的事儿，所以刚才张伟说的(听不清00:33:10)里面有咨询、有建设的东西，其实都是基于研发中心这么多坑他们在做这个事儿。
所以我们也希望未来可以跟大家一起去做更多的合作，所以这上面是我今天想给大家带来金融核心业务云原生改造的所有的经验的分享，当然我也不知道对大家有没有帮助，大家如果有兴趣可以直接联系我，我去现场跟你们再聊一聊，因为我是一个很喜欢做技术交流的人，因为我也拜访了很多金融机构，我们一直在聊，就说怎么改、怎么玩，其实挺有意思的，我也愿意，因为恒生的产品还不够多，我希望去你那里再看看。这是我的目标，所以谢谢各位，这是我的演讲。我把(听不清00:33:55)放进去，因为下面我又变成主持人，因为我刚才。
